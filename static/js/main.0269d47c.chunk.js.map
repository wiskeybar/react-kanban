{"version":3,"sources":["components/ContainerBox.js","components/TaskForm.js","components/Container.js","App.js","index.js"],"names":["ContainerBox","props","react_default","a","createElement","onDragEnter","dragEnter","onDragOver","dragOver","onDrop","dragEnd","key","id","className","concat","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","tasks","TaskForm","selectedType","React","createRef","newTask","autoComplete","onSubmit","e","handleSubmit","ref","title","type","name","placeholder","maxLength","minLength","map","box","value","toUpperCase","Container","state","taskName","boxes","class","color","removeTask","taskID","currentState","_this","filter","task","splice","indexOf","setState","Object","objectSpread","addTask","modal","preventDefault","current","cleanInput","replace","length","push","dropZone","onDragStart","dataTransfer","setData","onDragEnd","draggedTask","getData","_this2","this","backlog","todo","processing","checking","forEach","draggable","onClick","Fragment","components_TaskForm","stopPropagation","components_ContainerBox","Component","App","components_Container","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0269d47c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\n\r\n\r\n\r\nconst ContainerBox = (props) => {\r\n\r\n\r\n\r\n  return (\r\n    <div\r\n      onDragEnter={props.dragEnter}\r\n      onDragOver={props.dragOver}\r\n      onDrop={props.dragEnd}\r\n      key={props.id}\r\n      className={`${props.className}`} >\r\n      <h2 className=\"containerTitle\"> {props.id}</h2>\r\n      <CSSTransitionGroup component=\"div\"\r\n        className=\"containerBox\"\r\n        transitionName=\"boxAnimation\"\r\n        transitionEnterTimeout={500}\r\n        transitionLeaveTimeout={300}>\r\n        {props.tasks}\r\n      </CSSTransitionGroup>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default ContainerBox;","import React from 'react';\r\n\r\nconst TaskForm = (props) => {\r\n\r\n    const selectedType = React.createRef()\r\n    const newTask = React.createRef()\r\n\r\n    return (\r\n        <form\r\n            autoComplete=\"off\" onSubmit={(e) => props.handleSubmit(e, selectedType, newTask)} className=\"taskForm\">\r\n\r\n            <label >Task: <input\r\n                ref={newTask}\r\n                title=\"3 to 40 characters, only letters and digits will be added\"\r\n                type=\"text\"\r\n                name=\"task\"\r\n                placeholder=\"input your task here\"\r\n                className=\"taskInput\"\r\n                maxLength=\"40\"\r\n                minLength=\"3\" />\r\n            </label>\r\n            <label>Type:\r\n                <select title=\"Select type of task\" className=\"selectInput\" ref={selectedType} >\r\n                    {props.type.map(box => {\r\n                        return <option key={box.id} value={box.id}>{box.id.toUpperCase()}</option>\r\n                    })}\r\n                </select>\r\n            </label>\r\n            <input title=\"Submit new task\" className=\"submitForm\" type=\"submit\" value=\"Submit\" />\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import React, { Component } from 'react';\r\nimport '../styles/container.css'\r\nimport ContainerBox from './ContainerBox'\r\nimport TaskForm from './TaskForm'\r\n\r\n\r\nclass Container extends Component {\r\n    state = {\r\n        newTask: false,\r\n        tasks: [\r\n            { id: \"1\", taskName: \"Task1\", type: \"backlog\" },\r\n            { id: \"2\", taskName: \"Task2\", type: \"backlog\" },\r\n            { id: \"3\", taskName: \"Task3\", type: \"todo\" },\r\n            { id: \"4\", taskName: \"Task4\", type: \"processing\" },\r\n            { id: \"5\", taskName: \"Task5\", type: \"checking\" }\r\n        ]\r\n    }\r\n    boxes = [\r\n        { id: \"backlog\", class: \"containerBox backlog\", color: \"gray\" },\r\n        { id: \"todo\", class: \"containerBox todo\", color: \"gray\" },\r\n        { id: \"processing\", class: \"containerBox processing\", color: \"gray\" },\r\n        { id: \"checking\", class: \"containerBox checking\", color: \"gray\" }]\r\n\r\n    removeTask = (taskID) => {\r\n        const currentState = this.state;\r\n        currentState.tasks.filter((task) => {\r\n            if (task.id === taskID) {\r\n                currentState.tasks.splice(currentState.tasks.indexOf(task), 1)\r\n            }\r\n            return task\r\n        })\r\n        this.setState({\r\n            ...currentState\r\n        });\r\n\r\n    }\r\n\r\n    addTask = () => {\r\n        const modal = this.state.newTask;\r\n        this.setState({\r\n            newTask: !modal\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e, selectedType, newTask) => {\r\n        e.preventDefault()\r\n\r\n        if (newTask.current.value !== \"\") {\r\n            const currentState = this.state;\r\n            const cleanInput = newTask.current.value.replace(/[^a-zA-Z0-9]/g, '*');\r\n            const task = { id: `${currentState.tasks.length + 1}`, taskName: `${cleanInput}`, type: `${selectedType.current.value}` }\r\n            currentState.tasks.push(task);\r\n            this.setState({\r\n                currentState\r\n            })\r\n            newTask.current.value = \"\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n    dropZone = \"\"\r\n\r\n    onDragStart = (e, id) => {\r\n        e.dataTransfer.setData(\"ID\", id)\r\n    }\r\n\r\n\r\n    onDragEnd = (e) => {\r\n        const draggedTask = e.dataTransfer.getData(\"ID\")\r\n        const currentState = this.state;\r\n        currentState.tasks.filter((task) => {\r\n            if (task.id === draggedTask) {\r\n                task.type = this.dropZone\r\n            }\r\n            return task\r\n        })\r\n        this.setState({\r\n            ...currentState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const tasks = {\r\n            backlog: [],\r\n            todo: [],\r\n            processing: [],\r\n            checking: []\r\n        }\r\n        this.state.tasks.forEach((task) => {\r\n\r\n            tasks[task.type].push(\r\n                <div key={task.id}\r\n                    className=\"box dragMe\"\r\n                    draggable\r\n                    onDragStart={(e) => this.onDragStart(e, task.id)}\r\n                    onDragOver={() => this.dragEnd}\r\n                >\r\n                    {task.taskName}\r\n                    <button onClick={() => this.removeTask(task.id)} className=\"removeTask\"></button>\r\n\r\n                </div>\r\n\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"header\">DraggyDroppy</h1>\r\n\r\n                <button onClick={this.addTask} className=\"addTask\"></button>\r\n                {\r\n                    this.state.newTask ?\r\n                        <TaskForm type={this.boxes} handleSubmit={this.handleSubmit} />\r\n                        : null\r\n                }\r\n                <div className=\"container\"\r\n                    onDragOver={(e) => { e.preventDefault(); e.stopPropagation() }}>\r\n                    {this.boxes.map(box => (\r\n                        <ContainerBox\r\n                            dragOver={(e) => { e.preventDefault(); e.stopPropagation() }}\r\n                            dragEnter={(e) => { e.preventDefault(); this.dropZone = box.id; }}\r\n                            dragEnd={this.onDragEnd}\r\n                            key={box.id}\r\n                            id={box.id}\r\n                            className={box.class}\r\n                            color={box.color}\r\n                            tasks={tasks[box.id]} />\r\n                    ))}\r\n                </div>\r\n            </>);\r\n    }\r\n}\r\n\r\nexport default Container;\r\n\r\n","import React from 'react';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}